A binary tree is a collection of nodes in which each node is associated with up to two successor nodes, respectively called the left and right child. Not every node in the binary tree will have two children: one or both nodes may be omitted. A node in a binary tree that has no children is called a leaf node.
A node that has children is said to be the parent of its children. For a nonempty collection
of nodes to qualify as a binary tree, every node must have at most one parent, and there must be exactly one node with no parent. The one node that has no parent is called the root of the binary tree. An empty collection of nodes is regarded as constituting an empty binary tree.
There is some similarity between a linked list and a binary tree. The root of a binary tree corresponds to the head of a list, a child of a binary tree node corresponds to a successor node in a list, and the parent of a binary tree node corresponds to the predecessor of a node in the list. And of course, the analog of the empty list is the empty binary tree. First, we must recall an important idea: pointers.
C++ has an address operator & that can be used to retrieve the address of any variable. To
use it, place it before the variable whose address you want. Here is an expression that returns the address of the variable (By default, C++ prints addresses in hexadecimal); A variable that stores an address is called a pointer variable, but is often simply referred to as just a pointer. The definition of a pointer variable, say ptr, must specify the type of data that ptr will point to. The contents of pointer variables may be changed with mathematical statements that perform addition or subtraction, not all arithmetic operations may be performed on pointers. For example, you cannot use multipication or division with pointers. The following operations are allowable:

* The++ and -- operators may be used to increment or decrement a pointer variable.
* An integer may be added to or subtracted from a pointer variable. This may be performed with the + and - operators, or the += and -= operators.
* A pointer may be subtracted from another pointer

The use of the dynamic memory allocation and is only possible through the use of pointers. To dynamically allocate memory means that a program, while running, asks the computer to set aside a chunk of unused memory large enough to hold a variable of a specific data type. Let's say a program needs to create an integer variable. It will make a request to the computer that it allocate enough bytes to store an int. When the computer fills this request, it finds and sets aside a chunk of unused memory large enough for the variable. It then gives the program the starting address of the chunk of memory. The program can only access the newly allocated memory through its address, so a pointer is required to use those bytes. The way a C++ program requests dynamically allocated memory is through the new operator.
